# -*- coding: utf-8 -*-
"""
Created on Wed Mar  6 22:05:23 2019

@author: Richa Patel
"""
#SINGULAR VALUE DECOMPOSITION==========================================================================

from __future__ import division

import numpy as np
from numpy import linalg as LA


A = np.array([[1, 2, 0, 0, 2, 3, -1, -2]]).reshape((4, 2))
print( A)


n, m = A.shape
rank_A = LA.matrix_rank(A)

print ("rows:", n, "columns:", m)
print ("the rank of A is", rank_A)

U, d, V_T = LA.svd(A)
number_of_singular_values = len(d)
print ("number of singular values:", number_of_singular_values)

D = np.concatenate((np.diag(d), np.zeros((n - number_of_singular_values, m))))
A_restored = np.dot(U, np.dot(D, V_T))

np.allclose(A, A_restored, rtol=1e-14, atol=1e-15)

np.abs(A - A_restored)

B = np.array([[1, 2, 0, 0, 2, 4, -1, -2]]).reshape((4, 2))
print (B)
rank_B = LA.matrix_rank(B)
distance = LA.norm(A - B, "fro")

print ("the rank of B is", rank_B)
print ("the Frobenius-norm of the difference matrix A-B is", distance)
U_1 =  U[:, 0:rank_B]
D_1 = D[0:rank_B, 0:rank_B]
V_T_1 = V_T[0:rank_B, :]


A_1 = np.dot(U_1, np.dot(D_1, V_T_1))
print ("the best (that is the closest) rank 1 approximation of A is \n", A_1)
dist_from_A_1 = LA.norm(A - A_1, "fro")
print ("The Frobenius-norm of the difference matrix A-A_1 is", dist_from_A_1, 
      "which is smaller that in our previous naive attempt.")

#IMAGE COMPRESSION USING SVD============================================================================
from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image


image = np.array(Image.open('Castle_hill.jpg'))
image = image / 255
row, col, _ = image.shape
print ("pixels: ", row, "*", col)

fig = plt.figure(figsize=(15, 10))
a = fig.add_subplot(1, 1, 1)
imgplot = plt.imshow(image)
a.set_title('Castle hill, Budapest')
plt.show()


image_red = image[:, :, 0]
image_green = image[:, :, 1]
image_blue = image[:, :, 2]


original_bytes = image.nbytes
print( "The space (in bytes) needed to store this image is", original_bytes)
U_r, d_r, V_r = np.linalg.svd(image_red, full_matrices=True)
U_g, d_g, V_g = np.linalg.svd(image_green, full_matrices=True)
U_b, d_b, V_b = np.linalg.svd(image_blue, full_matrices=True)


bytes_to_be_stored = sum([matrix.nbytes for matrix in [U_r, d_r, V_r, U_g, d_g, V_g, U_b, d_b, V_b]])
print( "The matrices that we store have total size (in bytes):", bytes_to_be_stored)

k = 50

U_r_k = U_r[:, 0:k]
V_r_k = V_r[0:k, :]
U_g_k = U_g[:, 0:k]
V_g_k = V_g[0:k, :]
U_b_k = U_b[:, 0:k]
V_b_k = V_b[0:k, :]

d_r_k = d_r[0:k]
d_g_k = d_g[0:k]
d_b_k = d_b[0:k]

compressed_bytes = sum([matrix.nbytes for matrix in 
                        [U_r_k, d_r_k, V_r_k, U_g_k, d_g_k, V_g_k, U_b_k, d_b_k, V_b_k]])
print( "The compressed matrices that we store now have total size (in bytes):", compressed_bytes)

ratio = compressed_bytes / original_bytes
print( "The compression ratio between the original image size and the total size of the compressed factors is", ratio)


image_red_approx = np.dot(U_r_k, np.dot(np.diag(d_r_k), V_r_k))
image_green_approx = np.dot(U_g_k, np.dot(np.diag(d_g_k), V_g_k))
image_blue_approx = np.dot(U_b_k, np.dot(np.diag(d_b_k), V_b_k))

image_reconstructed = np.zeros((row, col, 3))

image_reconstructed[:, :, 0] = image_red_approx
image_reconstructed[:, :, 1] = image_green_approx
image_reconstructed[:, :, 2] = image_blue_approx

image_reconstructed[image_reconstructed < 0] = 0
image_reconstructed[image_reconstructed > 1] = 1

fig = plt.figure(figsize=(15, 10))
a = fig.add_subplot(1, 1, 1)
imgplot = plt.imshow(image_reconstructed)
a.set_title('Castle hill, compressed image using the best rank-{} approximation'.format(k))
plt.show()

k = 10

U_r_k = U_r[:, 0:k]
V_r_k = V_r[0:k, :]
U_g_k = U_g[:, 0:k]
V_g_k = V_g[0:k, :]
U_b_k = U_b[:, 0:k]
V_b_k = V_b[0:k, :]

d_r_k = d_r[0:k]
d_g_k = d_g[0:k]
d_b_k = d_b[0:k]

image_red_approx = np.dot(U_r_k, np.dot(np.diag(d_r_k), V_r_k))
image_green_approx = np.dot(U_g_k, np.dot(np.diag(d_g_k), V_g_k))
image_blue_approx = np.dot(U_b_k, np.dot(np.diag(d_b_k), V_b_k))

image_reconstructed = np.zeros((row, col, 3))
image_reconstructed[:, :, 0] = image_red_approx
image_reconstructed[:, :, 1] = image_green_approx
image_reconstructed[:, :, 2] = image_blue_approx
image_reconstructed[image_reconstructed < 0] = 0
image_reconstructed[image_reconstructed > 1] = 1

fig = plt.figure(figsize=(15, 10))
a = fig.add_subplot(1, 1, 1)
imgplot = plt.imshow(image_reconstructed)
a.set_title('Castle hill, compressed image using the best rank-{} approximation'.format(k))
plt.show()

k=200

U_r_k = U_r[:, 0:k]
V_r_k = V_r[0:k, :]
U_g_k = U_g[:, 0:k]
V_g_k = V_g[0:k, :]
U_b_k = U_b[:, 0:k]
V_b_k = V_b[0:k, :]

d_r_k = d_r[0:k]
d_g_k = d_g[0:k]
d_b_k = d_b[0:k]

image_red_approx = np.dot(U_r_k, np.dot(np.diag(d_r_k), V_r_k))
image_green_approx = np.dot(U_g_k, np.dot(np.diag(d_g_k), V_g_k))
image_blue_approx = np.dot(U_b_k, np.dot(np.diag(d_b_k), V_b_k))

image_reconstructed = np.zeros((row, col, 3))
image_reconstructed[:, :, 0] = image_red_approx
image_reconstructed[:, :, 1] = image_green_approx
image_reconstructed[:, :, 2] = image_blue_approx
image_reconstructed[image_reconstructed < 0] = 0
image_reconstructed[image_reconstructed > 1] = 1
fig = plt.figure(figsize=(15, 10))
a = fig.add_subplot(1, 1, 1)
imgplot = plt.imshow(image_reconstructed)
a.set_title('Castle hill, compressed image using the best rank-{} approximation'.format(k))
plt.show()
